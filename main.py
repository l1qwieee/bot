import logging
import datetime
from aiogram.utils.markdown import hlink
from aiogram import Bot, Dispatcher, Router, types
import asyncio
from dbad import DataBase
import keyboards as nav
import re

TOKEN = "5841486224:AAFf3GSIIZIVYxnsXD31Hvy3nPJWdvzZxwo"

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
db = DataBase("..\\bot(for_all)\database.db")

countKeyboards = [nav.whoreg, nav.mainGames, nav.inkb, nav.inkbtime]

weekDays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
weekDRus = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]


# –ü–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π:
# 1. –ü—Ä–≤–æ–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ –ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç–æ–º
# 2. –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è: 1)—Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ(–¥–æ–ø–æ–ª–Ω–∏—Ç—å) 2) –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è
# 1)
#   1. –í—ã–±–æ—Ä –∏–≥—Ä—ã
#   2. –í–≤–æ–¥ –¥–∞—Ç—ã
#   3. –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
#   4. –í–≤–æ–¥ –∫–æ–ª-–≤–∞ –º–µ—Å—Ç

#–ù–∞—á–∞–ª–æ
@router.message()
async def vector_mes(message: types.Message):
    text = message.text
    if message.text == '/start':
        await start_comm(message)
    elif message.text == '–£–∑–Ω–∞—Ç—å –∫—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è' or message.text == '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' or message.text == '–ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
        await choice_direction(message)
    elif message.text == '/filled':
        await startwhoreg(message)
    elif message.text == '/schedule':
        await schedule_comm(message)
    elif message.text == '/newuser':
        await add_new_user(message)
    elif re.match(r"\d{1,2}-\d{1,2}-\d{4}", message.text):
        await dat(message, text, True)
    elif re.findall(r'\d{1,2}:\d{2}', message.text):
        await added_times(message, text, True)
    elif re.findall(r"\d{2}|\d{1}", message.text):
        if examination_schedule("users_from_admin", 5) == True:
            await num_of_seats(message, True)
        elif examination_schedule("users_from_admin", 7) == True:
            await num_phone(message, text)
        elif examination_schedule("users_from_admin", 8) == True:
            await end_new_us(message, text)
    elif message.text == '–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥' or message.text == '–ù–∞–∑–∞–¥':
        await step(message)
    elif re.match(r'^[A-Za-z–ê-–Ø–∞-—è\s-]+$', message.text):
        await name(message, text, True)
    elif message.text == 'üí∑ –ù–∞–ª–∏—á–Ω—ã–µ' or message.text == 'üí≥ –ü–µ—Ä–µ–≤–æ–¥':
        await paymen_ad_us(message, text)
    else:
        await bot.send_message(message.from_user.id, text="ZzZzZzZzZzZ")

@router.callback_query()
async def vector_call(query: types.CallbackQuery):
    if query.data == "volleyball" or query.data == "football":
        text = query.data
        await call_back_games2(query, text, True)
    elif query.data[0] == "*":
        ch = query.data[1:] 
        await click_date(query, ch, True)
    elif query.data[0] == "9":
        ch = query.data[1:]
        await ckick_time(query, ch, True)
    elif query.data == "yes" or query.data == "no":
        await del_game(query)
    

async def start_comm(message: types.Message):
    if message.from_user.id == 738070596 or message.from_user.id == 1051812255:
        await bot.send_message(message.from_user.id, text="–ü—Ä–∏–≤–µ—Ç! –¢—ã –∫–∞–∫ —Ä–∞–∑ —Ç–æ—Ç, –∫—Ç–æ –º–Ω–µ –Ω—É–¥–∂–µ–Ω) –ü–æ–∫–∞–∂—É —Ç–µ–±–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è —É –º–µ–Ω—è –µ—Å—Ç—å –ø–æ —Ç–≤–æ–µ–º—É –∂–µ–ª–∞–Ω–∏—é", reply_markup=countKeyboards[0])
        await bot.send_message(message.from_user.id, text="–ò—Ç–∞–∫, –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏–ª–∏ —á—Ç–æ —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ !–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –Ω–∞—á–∏–Ω–∞–π—Ç–µ –≤—Å–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, –∞ –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Ç–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ò–ª–∏ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–ø–µ—Ü–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫:\n/schedule - –ª—é–±–∞—è –ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n/filled - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏\n/newuser - –í—ã —Å–∞–º–∏ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")    
    else:
        await bot.send_message(message.from_user.id, text="–ë—Ä–æ, —Ç—ã –∫—Ç–æ? \n –∏–¥–∏-–∫–∞ —Ç—ã –æ—Ç—Å—é–¥–∞")

#–í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async def choice_direction(message: types.Message):
    db.delete()
    db.delete_data()
    db.delete_prog_reg()
    if message.text == '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        db.ff_step("schedule_data", 1)
    elif message.text == '–£–∑–Ω–∞—Ç—å –∫—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è':
        db.ff_step("prog_who_reg", 1)
    elif message.text == '–ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
        db.ff_step("users_from_admin", 1)
    await bot.send_message(message.from_user.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –∏–≥—Ä—É:", reply_markup=nav.InmainGames)

#–í—ã–±–æ—Ä: —É–∑–Ω–∞–µ–º –∫—Ç–æ –∫—É–¥–∞ –∑–∞–ø–∏—Å–∞–ª—Å—è
async def startwhoreg(message: types.Message):
    db.delete_data()
    db.delete()
    db.delete_prog_reg()
    db.ff_step("prog_who_reg", 1)
    await bot.send_message(message.from_user.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –∏–≥—Ä—É:", reply_markup=nav.InmainGames)

async def add_new_user(message: types.Message):
    db.delete_data()
    db.delete()
    db.delete_prog_reg()
    db.ff_step("users_from_admin", 1)
    await bot.send_message(message.from_user.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –∏–≥—Ä—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=nav.InmainGames)

async def set_new_user(message: types.Message):
    db.delete_data()
    db.delete()
    db.update_column('game', 'NULL')
    clickdate = db.sel_admin_us('date', 1)[0]
    data_id = db.select_data_id_chek(clickdate)[0]
    time_id = db.sel_admin_us('time', 1)[0]
    game_id = db.select_game_id(data_id, time_id)[0]
    all_seats = db.select_seats(game_id)[0]
    us_seats = db.sel_admin_us('seats', 1)[0]
    new_seats = all_seats + us_seats
    db.update_seats(new_seats, game_id)
    await bot.send_message(message.from_user.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –∏–≥—Ä—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=nav.InmainGames)

#–í—ã–±–æ—Ä: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
#–í—ã–∑–æ–≤ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
async def schedule_comm(message: types.Message):
    db.delete_data()
    db.delete()
    db.delete_prog_reg()
    db.ff_step("schedule_data", 1)
    await bot.send_message(message.from_user.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –∏–≥—Ä—É:", reply_markup=nav.InmainGames)

#–í—ã–±–æ—Ä –∏–≥—Ä—ã/–≤—ã–∑–æ–≤ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
async def call_back_games2(query: types.CallbackQuery, text, vector):
    if vector == True:
        vec = 1
    else:
        vec = 3
    if examination_schedule("schedule_data", vec) == False and examination_who_reg("prog_who_reg") == False and examination_schedule("users_from_admin", vec) == False:
        await bot.send_message(query.from_user.id, text="–ï—Å–ª–∏ –±—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω, —Ç–æ —è –±—ã —Å–µ–π—á–∞—Å –∑–∞–ª–∞–≥–∞–ª, —Ç.–∫. –≤—ã –Ω–∞—Ä—É—à–∏–ª–∏ –º–æ–∏ –ø—Ä–∞–≤–∏–ª–∞.\n–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—ã—à–ª—é –≤–∞–º –∏—Ö –µ—â–µ —Ä–∞–∑:")
        await bot.send_message(query.from_user.id, text="–ò—Ç–∞–∫, –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏–ª–∏ —á—Ç–æ —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ !–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –Ω–∞—á–∏–Ω–∞–π—Ç–µ –≤—Å–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, –∞ –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Ç–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ò–ª–∏ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–ø–µ—Ü–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫:\n/schedule - –ª—é–±–∞—è –ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n/filled - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏\n/newuser - –í—ã —Å–∞–º–∏ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else:

        if examination_schedule("schedule_data", vec) == True:
            table = "schedule_data"
        elif examination_who_reg("prog_who_reg") == True:
            table = "prog_who_reg"
        elif examination_schedule("users_from_admin", vec) == True:
            table = "users_from_admin"
        game = text
        db.f_step(table, game, 2, 1)
        if table == "prog_who_reg":
            await kb_data(query)
        elif table == "schedule_data":
            await bot.send_message(query.from_user.id, text="–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä—ã. \n–ü—Ä–∏–º–µ—Ä: 20-02-2023")
        elif table == "users_from_admin":
            print('ya tut')
            if db.sel_set(2)[0] == None or db.sel_set(2)[0] == 'name':
                await bot.send_message(query.from_user.id, text="–í–µ–¥–∏—Ç–µ –∏–º—è")
            else:
                print('ya tut')
                us_name = db.sel_admin_us("name", 2)[0]
                await name(query, us_name, True)

#–í—ã–±–æ—Ä –¥–∞—Ç—ã/–≤—ã–∑–æ–≤ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏/–≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏/–≤—ã–∑–æ–≤ –≤–≤–æ–¥–∞ –∫–æ–ª-–≤–∞ –º–µ—Å—Ç–∞/–≤–≤–æ–¥ –∫–æ–ª-–≤–∞ –º–µ—Å—Ç
async def dat(message: types.Message, text, vector):
    if vector == True:
        vec = 2
    else:
        vec = 4
    if examination_schedule("schedule_data", vec) == False:
        await bot.send_message(message.from_user.id, text="–ï—Å–ª–∏ –±—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω, —Ç–æ —è –±—ã —Å–µ–π—á–∞—Å –∑–∞–ª–∞–≥–∞–ª, —Ç.–∫. –≤—ã –Ω–∞—Ä—É—à–∏–ª–∏ –º–æ–∏ –ø—Ä–∞–≤–∏–ª–∞.\n–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—ã—à–ª—é –≤–∞–º –∏—Ö –µ—â–µ —Ä–∞–∑:")
        await bot.send_message(message.from_user.id, text="–ò—Ç–∞–∫, –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏–ª–∏ —á—Ç–æ —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ !–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –Ω–∞—á–∏–Ω–∞–π—Ç–µ –≤—Å–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, –∞ –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Ç–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ò–ª–∏ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–ø–µ—Ü–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫:\n/schedule - –ª—é–±–∞—è –ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n/filled - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏\n/newuser - –í—ã —Å–∞–º–∏ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")    
    else:
        valid_date = []
        date_pattern = r"\d{1,2}-\d{1,2}-\d{4}"
        date = re.findall(date_pattern, text)
        halt = True
        for item in date:
            day, month, year  = map(int, item.split('-'))
            today = datetime.date.today()
            year_today = today.year
            if year_today <= year <= 2050:
                if 1 <= month <= 12:
                    if month == 2:
                        if 1 <= day <= 28:
                            valid_date.append(item)
                        else:
                            await bot.send_message(message.from_user.id, text="–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–Ω–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∞—Ç—É –∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –¥–∞—Ç—É")
                            halt = False
                    elif month % 2 == 0:
                        if 1 <= day <= 30:
                            valid_date.append(item)
                        else:
                            await bot.send_message(message.from_user.id, text="–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–Ω–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∞—Ç—É –∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –¥–∞—Ç—É")
                            halt = False
                    elif month % 2 == 1:
                        if 1 <= day <= 31:
                            valid_date.append(item)
                        else:
                            await bot.send_message(message.from_user.id, text="–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–Ω–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∞—Ç—É –∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –¥–∞—Ç—É")
                            halt = False
                    else:
                        await bot.send_message(message.from_user.id, text="–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–Ω–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∞—Ç—É –∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –¥–∞—Ç—É")
                        halt = False
                else:
                    await bot.send_message(message.from_user.id, text="–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–Ω–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∞—Ç—É –∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –¥–∞—Ç—É")
                    halt = False
            else:
                    await bot.send_message(message.from_user.id, text="–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–Ω–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∞—Ç—É –∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –¥–∞—Ç—É")
                    halt = False
        date_str = ''.join(valid_date)
        if halt == True:
            user_date = datetime.datetime.strptime(date_str, "%d-%m-%Y").date()
            if today > user_date:
                await bot.send_message(message.from_user.id, text="–≠—Ç–∞ –¥–∞—Ç–∞ –º–µ–Ω—å—à–µ, —á–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è. –ó–∞—á–µ–º –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–∞—Ç—É –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ? üßê")
            else:
        # –î–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É

                if db.select("game", vec)[0] == "volleyball":
                    sel_game = "volleyball"
                else:
                    sel_game = "football"


                if db.chek_data(message.text, sel_game) != []:
                    await bot.send_message(message.from_user.id, text="–¢–∞–∫–∞—è –¥–∞—Ç–∞ —É–∂–µ –µ—Å—Ç—å. –í—ã –º–æ–∂–µ—Ç–µ –µ–µ —É–¥–∞–ª–∏—Ç—å")
                else:
                    db.add("data", message.text, 3, 2, sel_game)
                    await bot.send_message(message.from_user.id, text=f"–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n–î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏:\n–ò–≥—Ä–∞: {sel_game}\n–î–∞—Ç–∞: {date_str}\n–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ - –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ, –µ—Å–ª–∏ –Ω–µ—Ç - –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥", reply_markup=nav.kbstep)
        else:
            await bot.send_message(message.from_user.id, text="–í—ã –≤–≤–µ–ª–∏ –¥–∞—Ç—É —Å –æ—à–∏–±–∫–æ–π, –∏–ª–∏ –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤–≤–µ—Å—Ç–∏ –≤–æ–æ–±—â–µ –Ω–µ –¥–∞—Ç—É")


# –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
async def added_times(message: types.Message, text, vector):
    db.delete_new_times()
    if vector == True:
        vec = 3
    else:
        vec = 5
    if examination_schedule("schedule_data", vec) == False:
        await bot.send_message(message.from_user.id, text="–ï—Å–ª–∏ –±—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω, —Ç–æ —è –±—ã —Å–µ–π—á–∞—Å –∑–∞–ª–∞–≥–∞–ª, —Ç.–∫. –≤—ã –Ω–∞—Ä—É—à–∏–ª–∏ –º–æ–∏ –ø—Ä–∞–≤–∏–ª–∞.\n–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—ã—à–ª—é –≤–∞–º –∏—Ö –µ—â–µ —Ä–∞–∑:")
        await bot.send_message(message.from_user.id, text="–ò—Ç–∞–∫, –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏–ª–∏ —á—Ç–æ —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ !–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –Ω–∞—á–∏–Ω–∞–π—Ç–µ –≤—Å–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, –∞ –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Ç–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ò–ª–∏ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–ø–µ—Ü–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫:\n/schedule - –ª—é–±–∞—è –ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n/filled - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏\n/newuser - –í—ã —Å–∞–º–∏ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else:
        valid_times = []
        time_pattern = r"\d{1,2}:\d{2}"
        time = re.findall(time_pattern, text)
        for item in time:
            hour, minute = map(int, item.split(':'))
            if 0 <= hour <= 23 and 0 <= minute <= 60:
                valid_times.append(item)
                halt = True
            else:
                halt = False





        if halt == True:
            ms = ' '.join(valid_times)
            times = ms.split()
            bool = False
            for i in ms:
                if i == ":":
                    bool = True
                    break
            if bool == True:
                cc = 0
                data_id = db.select_data_id(vec)[0] # —É–∑–Ω–∞—é –∫–∞–∫–∞—è –¥–∞—Ç–∞ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞
                while cc < len(times):
                    if bool == True:
                        db.insert_time(data_id, times[cc], 4)
                    cc += 1
                db.update_step(data_id, 4)
                count_games = db.count_games(4)[0]
                date = db.select_data(4)[0]
                game = db.select_game(4)[0]
                str_time = ' –∏ '.join(valid_times)
                await bot.send_message(message.from_user.id, text=f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ {count_games} –∏–≥—Ä—ã\n–ù–∞ –¥–∞—Ç—É: {date}\n–ü–æ –∏–≥—Ä–µ: {game}\n–ù–∞ –≤—Ä–µ–º—è: {str_time}", reply_markup=nav.kbstep)



#–í–≤–æ–¥ –º–µ—Å—Ç–∞
async def num_of_seats(message: types.Message, vector):
    if vector == True:
        vec = 4
    else:
        vec = 5
    if examination_schedule("schedule_data", vec) == False and examination_schedule("users_from_admin", vec+1) == False:
        await bot.send_message(message.from_user.id, text="–ï—Å–ª–∏ –±—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω, —Ç–æ —è –±—ã —Å–µ–π—á–∞—Å –∑–∞–ª–∞–≥–∞–ª, —Ç.–∫. –≤—ã –Ω–∞—Ä—É—à–∏–ª–∏ –º–æ–∏ –ø—Ä–∞–≤–∏–ª–∞.\n–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—ã—à–ª—é –≤–∞–º –∏—Ö –µ—â–µ —Ä–∞–∑:")
        await bot.send_message(message.from_user.id, text="–ò—Ç–∞–∫, –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏–ª–∏ —á—Ç–æ —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ !–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –Ω–∞—á–∏–Ω–∞–π—Ç–µ –≤—Å–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, –∞ –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Ç–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ò–ª–∏ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–ø–µ—Ü–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫:\n/schedule - –ª—é–±–∞—è –ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n/filled - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏\n/newuser - –í—ã —Å–∞–º–∏ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")    
    else:
        

        valid_seats = []
        seats_pattern = r"\d{2}|\d{1}"
        seats = re.findall(seats_pattern, message.text)
        mess = ''.join(message.text)
        if examination_schedule("users_from_admin", vec+1) == True:
            date = db.select_ad_data(5)[0]
            data_id = db.sel_data_id(date)[0]
            times = db.sel_admin_us('time', 5)[0]
            game_id = db.select_game_id(data_id, times)[0]
            all_seats = db.select_seats(game_id)[0]
            back_seats = db.sel_admin_us('seats', 5)[0]
            if int(seats[0]) > back_seats:
                await bot.send_message(message.from_user.id, text="–ú–µ—Å—Ç –Ω–∞ —ç—Ç—É –∏–≥—Ä—É –±–æ–ª—å—à–µ –Ω–µ—Ç! –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Ç—Å–≤–æ –º–µ—Å—Ç –º–µ–Ω—å—à–µ —á–µ–º —É –≤–∞—Å –±—ã–ª–æ –∏–ª–∏ –æ—Ç–∞–≤–∏—Ç—å –≤—Å–µ –∫–∞–∫ –µ—Å—Ç—å)")
            else:  
                if db.sel_set(5)[0] == None:
                    if int(seats[0]) <= int(all_seats):
                        db.add_seats(int(seats[0]), 6, vec+1)
                        db.update_seats(int(all_seats) - int(seats[0]), game_id)
                        await bot.send_message(message.from_user.id, text="–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=nav.payment)
                    else:
                        await bot.send_message(message.from_user.id, text="–°—Ç–æ–ª—å–∫–æ –º–µ—Å—Ç –Ω–∞ —ç—Ç—É –∏–≥—Ä—É –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è")
                        db.update_lvl_admin(4, 6)
                else:
                    seat_us = db.sel_admin_us('seats', 5)[0]
                    print("seats_us =", seat_us)
                    print("all_seats + seats_us =", int(all_seats)+int(seat_us), "game_id =", game_id)
                    db.update_seats(int(all_seats)+int(seat_us), game_id)
                    new_seats = db.sel_admin_us('seats', 5)[0]
                    print("new_seats =", new_seats)
                    if int(seats[0]) <= int(all_seats):
                        db.add_seats(int(seats[0]), 6, vec+1)
                        db.update_seats(int(all_seats) - int(new_seats), game_id)
                        await bot.send_message(message.from_user.id, text="–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã")
                        await mes(message)
                    else:
                        await bot.send_message(message.from_user.id, text="–°—Ç–æ–ª—å–∫–æ –º–µ—Å—Ç –Ω–∞ —ç—Ç—É –∏–≥—Ä—É –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è")
                        await mes(message)
                        db.update_lvl_admin(4, 6)
        else:
            howmutch = db.select_new_games()[0]
            place = seats[:howmutch]
            if howmutch > len(place):
                await bot.send_message(message.from_user.id, text=f"–í—ã –≤–≤–µ–ª–∏ –º–µ—Å—Ç–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω—É –∏–≥—Ä—É, –∞ –¥–æ–±–∞–≤–∏–ª–∏ {howmutch}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä —Å—Ä–∞–∑—É.\n!–ù–ê–ü–û–ú–ò–ù–ê–Æ!\n–ó–∞ –º–µ—Å—Ç–∞ –Ω–∞ –∏–≥—Ä—É —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ª—é–±—ã–µ —Ü–∏—Ñ—Ä—ã(–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ –∏ –¥–≤—É–∑–Ω–∞—á–Ω—ã–µ)")
            else:
                
                bool = False
                for i in mess:
                    if i == ":":
                        bool = True
                        break
                if bool == True:
                    text = ''.join([item[0] for item in db.select_times()])
                    await added_times(message, text, vector)
                else:
                    data_id = db.select_data_id(4)[0]
                    res = db.select_id(data_id)
                    hmid = [item[0] for item in res]
                    cc = 0
                    while cc < len(place):
                        db.add_place(place[cc], hmid[cc], data_id)
                        cc += 1
                    game = db.select_game(5)[0]
                    date = db.select_data(5)[0]
                    times = [item[0] for item in db.select_times()]
                    seats_list = []
        #           for item in place:
        #               seats_list.append(f"({item})")
                    combined_list = [f"{x} ({y})" for x, y in zip(times, place)]
                    str_time_and_seats = ' –∏ '.join(combined_list)
        #            time_and_seats = [item for pair in zip(times, seats_list) for item in pair]
                    await bot.send_message(message.from_user.id, text=f"!–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!\n–ò–≥—Ä–∞: {game}\n–î–∞—Ç–∞: {date}\n–í—Ä–µ–º—è –∏ –º–µ—Å—Ç–∞: {str_time_and_seats}", reply_markup=nav.kbstep)
    #            await bot.send_message(message.from_user.id, text="–í–æ—Ç –¥–≤–µ –º–æ–∏—Ö –≥–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/schedule - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n/whoreg - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞–ø–∏—Å–∞–ª—Å—è –∏ –∑–∞–æ–¥–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º–∏")




#–í—ã–±–æ—Ä: —É–∑–Ω–∞–µ–º –∫—Ç–æ –∫—É–¥–∞ –∑–∞–ø–∏—Å–∞–ª—Å—è

#–í—ã–±–æ—Ä –¥–∞—Ç—ã
async def kb_data(message: types.Message):
    if examination_who_reg("prog_who_reg") == False:
        await bot.send_message(message.from_user.id, text="–ï—Å–ª–∏ –±—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω, —Ç–æ —è –±—ã —Å–µ–π—á–∞—Å –∑–∞–ª–∞–≥–∞–ª, —Ç.–∫. –≤—ã –Ω–∞—Ä—É—à–∏–ª–∏ –º–æ–∏ –ø—Ä–∞–≤–∏–ª–∞.\n–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—ã—à–ª—é –≤–∞–º –∏—Ö –µ—â–µ —Ä–∞–∑:")
        await bot.send_message(message.from_user.id, text="–ò—Ç–∞–∫, –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏–ª–∏ —á—Ç–æ —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ !–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –Ω–∞—á–∏–Ω–∞–π—Ç–µ –≤—Å–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, –∞ –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Ç–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ò–ª–∏ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–ø–µ—Ü–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫:\n/schedule - –ª—é–±–∞—è –ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n/filled - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏\n/newuser - –í—ã —Å–∞–º–∏ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")   
    else:
        days = []
        game = db.select_game_whor()[0]
        row = [date[0] for date in db.sel_all_data(game)]
        if row == []:
            await bot.send_message(message.from_user.id, text="–£ –≤–∞—Å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç –∏–≥—Ä –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ —ç—Ç–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏", reply_markup=nav.whoreg)
            await bot.send_message(message.from_user.id, text="–í–æ—Ç –¥–≤–µ –º–æ–∏—Ö –≥–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/schedule - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n/filled - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞–ø–∏—Å–∞–ª—Å—è –∏ –∑–∞–æ–¥–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º–∏")
        else:
            for item in row:
                days.append(item)

            await bot.send_message(message.from_user.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É:", reply_markup=nav.kbdata(days))


#–£–∑–Ω–∞—é –∫–∞–∫–∞—è –¥–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞
async def click_date(query: types.CallbackQuery, text, vector):
    if vector == True:
        vec = 3
    else:
        vec = 4
    if examination_who_reg("prog_who_reg") == False and examination_schedule("users_from_admin", vec) == False:
        await bot.send_message(query.from_user.id, text="–ï—Å–ª–∏ –±—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω, —Ç–æ —è –±—ã —Å–µ–π—á–∞—Å –∑–∞–ª–∞–≥–∞–ª, —Ç.–∫. –≤—ã –Ω–∞—Ä—É—à–∏–ª–∏ –º–æ–∏ –ø—Ä–∞–≤–∏–ª–∞.\n–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—ã—à–ª—é –≤–∞–º –∏—Ö –µ—â–µ —Ä–∞–∑:")
        await bot.send_message(query.from_user.id, text="–ò—Ç–∞–∫, –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏–ª–∏ —á—Ç–æ —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ !–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –Ω–∞—á–∏–Ω–∞–π—Ç–µ –≤—Å–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, –∞ –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Ç–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ò–ª–∏ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–ø–µ—Ü–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫:\n/schedule - –ª—é–±–∞—è –ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n/filled - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏\n/newuser - –í—ã —Å–∞–º–∏ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")    
    else:
        choice = text
        if examination_schedule("users_from_admin", vec) == True:
            db.add_date(choice, 4, 3)
        else:
            db.update("data", choice, 3, 2)
        times = []
        seats = []
        print(choice)
        data_id = db.sel_data_id(choice)[0]

        seat = [date[0] for date in db.sel_seats(data_id)]
        row = [date[0] for date in db.sel_time(data_id)]
        for item, count in zip(row, seat):
            times.append(item)
            seats.append(count)
        game = db.sel_admin_us('game', 4)[0]
        count_games = db.select_count_games(game)[0]
        if count_games == 1:
            await bot.send_message(query.from_user.id, text=f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É, —Ç.–∫. –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä –ø–æ {game}, –Ω–∞ —ç—Ç—É –¥–∞—Ç—É")
            await mes(query)
        else:
            await bot.send_message(query.from_user.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –≤—Ä–µ–º—è:", reply_markup=nav.kbtime(times, seats))
            


#–£–∑–Ω–∞—é –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ
async def ckick_time(query: types.CallbackQuery, text, vector):
    if vector == True:
        vec = 4
    else:
        vec = 5
    if examination_who_reg("prog_who_reg") == False and examination_schedule("users_from_admin", vec) == False:
        await bot.send_message(query.from_user.id, text="–ï—Å–ª–∏ –±—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω, —Ç–æ —è –±—ã —Å–µ–π—á–∞—Å –∑–∞–ª–∞–≥–∞–ª, —Ç.–∫. –≤—ã –Ω–∞—Ä—É—à–∏–ª–∏ –º–æ–∏ –ø—Ä–∞–≤–∏–ª–∞.\n–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—ã—à–ª—é –≤–∞–º –∏—Ö –µ—â–µ —Ä–∞–∑:")
        await bot.send_message(query.from_user.id, text="–ò—Ç–∞–∫, –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏–ª–∏ —á—Ç–æ —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ !–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –Ω–∞—á–∏–Ω–∞–π—Ç–µ –≤—Å–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, –∞ –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Ç–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ò–ª–∏ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–ø–µ—Ü–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫:\n/schedule - –ª—é–±–∞—è –ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n/filled - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏\n/newuser - –í—ã —Å–∞–º–∏ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")   
    else:
        choice = text
        if examination_schedule("users_from_admin", vec) == True:
            data = db.select_ad_data(vec)[0]
            data_id = db.select_data_id_chek(data)[0]
            game_id = db.select_game_id(data_id, choice)[0]
            db.add_time_admin(choice, 5, 4)
            if db.sel_set(5)[0] == None or db.sel_set(5)[0] == 'seats':
                await bot.send_message(query.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç", reply_markup=nav.kbremove)
            else:
                us_seats = db.sel_admin_us('seats', 5)[0]
                open_seats = db.select_seats(game_id)[0]
                if open_seats < us_seats:
                    await bot.send_message(query.from_user.id, text="–ö–æ–ª–∏—á–µ—Ç—Å–æ–≤ –º–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤–≤–æ–¥–∏–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –±–æ–ª—å—à–µ, —á–µ–º –∫–æ–ª–∏—á–µ—Ç—Å–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –Ω–∞ –≤–∞—à–µ–π –Ω–æ–≤–æ–π –∏–≥—Ä–µ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ–ª–∞–µ–º—ã—Ö –º–µ—Å—Ç")
                else:
                    await bot.send_message(query.from_user.id, text="–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã")
                    await mes(query)
        else:
            data = db.select_data_whor()[0]
            data_id = db.select_data_id_chek(data)[0]
            game_id = db.select_game_id(data_id, choice)[0]
            reg_list = db.chek_guys(game_id)
            db.update("time", choice, 4, 3)
            if reg_list == []:
                await bot.send_message(query.from_user.id, text="–¢—É—Ç –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç(((")
                await bot.send_message(query.from_user.id, text="–ñ–µ–ª–∞–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∏–≥—Ä—É?", reply_markup=nav.kbyes)
            else:

                nicknames = await link_generetion(game_id)



                inf_list = ["–ò–º—è", "–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º(–Ω–µ–π)", "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"]
                message_text = "–í–æ—Ç –∫—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ —ç—Ç—É –∏–≥—Ä—É: \n"
                i = 0
                j = 0
                while i < len(reg_list):
                    while j < 3:
                        text = reg_list[i][j]
                        if j == 0:
                            text = hlink(reg_list[i][j], nicknames[i])
                        message_text += f"<b>-{inf_list[j]}:</b>   <u>{text}</u>\n"
                        j += 1
                    i += 1
                    j = 0

                await bot.send_message(query.from_user.id, text=message_text, parse_mode="HTML")
                db.delete()



async def link_generetion(game_id):

    all_nicknames = [date[0] for date in db.sel_all_nickname(game_id)]
    message_text = []
    for item in all_nicknames:
        message_text.append(f"t.me/{item}")



    return message_text



#New user
async def name(message: types.Message, text, vector):
    print("ya teper tut")
    if text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
        await end_new_us(message, text)
    else:
        if vector == True:
            vec = 2
        else:
            vec = 4
        if examination_schedule("users_from_admin", vec) == False:
            await bot.send_message(message.from_user.id, text="–ï—Å–ª–∏ –±—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω, —Ç–æ —è –±—ã —Å–µ–π—á–∞—Å –∑–∞–ª–∞–≥–∞–ª, —Ç.–∫. –≤—ã –Ω–∞—Ä—É—à–∏–ª–∏ –º–æ–∏ –ø—Ä–∞–≤–∏–ª–∞.\n–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—ã—à–ª—é –≤–∞–º –∏—Ö –µ—â–µ —Ä–∞–∑:")
            await bot.send_message(message.from_user.id, text="–ò—Ç–∞–∫, –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏–ª–∏ —á—Ç–æ —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ !–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –Ω–∞—á–∏–Ω–∞–π—Ç–µ –≤—Å–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, –∞ –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Ç–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ò–ª–∏ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–ø–µ—Ü–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫:\n/schedule - –ª—é–±–∞—è –ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n/filled - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏\n/newuser - –í—ã —Å–∞–º–∏ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")   
        else:
            db.add_name(text, 3, 2)
            res = db.select_name()[0]

            days = []
            game = db.select_game_admin(3)[0]
            row = [date[0] for date in db.sel_all_data(game)]
            if row == []:
                await bot.send_message(message.from_user.id, text="–£ –≤–∞—Å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç –∏–≥—Ä –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ —ç—Ç–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏", reply_markup=nav.whoreg)
                await bot.send_message(message.from_user.id, text="–í–æ—Ç —Ç—Ä–∏ –º–æ–∏—Ö –≥–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/schedule - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n/filled - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞–ø–∏—Å–∞–ª—Å—è –∏ –∑–∞–æ–¥–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º–∏\n/newuser - –í—ã —Å–∞–º–∏ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            else:
                for item in row:
                    days.append(item)
                if db.sel_set(3)[0] == 'game' or db.sel_set(3)[0] == 'date' or db.sel_set(3)[0] == None:
                    await bot.send_message(message.from_user.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É:", reply_markup=nav.kbdata(days))
                else:
                    await bot.send_message(message.from_user.id, text="–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã")
                    await mes(message)

async def paymen_ad_us(message: types.Message, text):
    if text == 'üí∑ –ù–∞–ª–∏—á–Ω—ã–µ':
        pay = "–ù–∞–ª–∏—á–Ω—ã–µ"
    else:
        pay = "–ü–µ—Ä–µ–≤–æ–¥"
    db.add_payment(pay, 7, 6)
    if db.sel_set(7)[0] == None:
        await bot.send_message(message.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ü–∏—Ñ—Ä—ã, —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –±–µ–∑ –ø–ª—é—Å–∞)")
  #      await bot.send_message(message.from_user.id, text=f"–í–æ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n–ò–≥—Ä–∞: {list_inf[item][1]}\n–ò–º—è: {list_inf[item][3]}\n–î–∞—Ç–∞: {list_inf[item][2]}\n–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏–≥—Ä—ã: {list_inf[item][4]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π —Å –Ω–∏–º(–Ω–µ–π): {list_inf[item][5]}\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {pay}")
  #      await bot.send_message(message.from_user.id, text="–ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã - –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –∏–≥—Ä—É –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–ï—Å–ª–∏ –Ω–µ—Ç - –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥\n\n\n1.–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n2.–í–µ—Ä–Ω—É—Ç—å—Å—è –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", reply_markup=nav.admuser)
    else:
        await bot.send_message(message.from_user.id, text="–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã")
        await mes(message)

async def num_phone(message: types.Message, text):
    db.update_num(text, 7)
    list_inf = db.select_ad_us(7)
    item = 0

    await bot.send_message(message.from_user.id, text=f"–í–æ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n–ò–≥—Ä–∞: {list_inf[item][1]}\n–ò–º—è: {list_inf[item][3]}\n–î–∞—Ç–∞: {list_inf[item][2]}\n–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏–≥—Ä—ã: {list_inf[item][4]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π —Å –Ω–∏–º(–Ω–µ–π): {list_inf[item][5]}\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {list_inf[item][6]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +{text}")
    await bot.send_message(message.from_user.id, text="–ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã - –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –∏–≥—Ä—É –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–ï—Å–ª–∏ –Ω–µ—Ç - –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥\n\n\n1.–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n2.–í–µ—Ä–Ω—É—Ç—å—Å—è –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", reply_markup=nav.admuser)
    db.update_lvl_admin(8, 7)


async def end_new_us(message: types.Message, text):
    if text == "1üëç" or text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
        inf = db.select_inf_ad(7)
        item = 0
        data_id = db.select_data_id_chek(inf[item][2])[0]
        game_id = db.select_game_id(data_id, inf[item][4])[0]

        #–ó–∞–Ω–æ—à—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.add_new(inf[item][0], game_id, inf[item][5], inf[item][6])
        await bot.send_message(message.from_user.id, text="–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        await bot.send_message(message.from_user.id, text="–í–æ—Ç —Ç—Ä–∏ –º–æ–∏—Ö –≥–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/schedule - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n/filled - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞–ø–∏—Å–∞–ª—Å—è –∏ –∑–∞–æ–¥–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º–∏\n/newuser - –í—ã —Å–∞–º–∏ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        db.update_lvl_admin(10, 7)
    else:
        if db.set() == False:
            db.up_set('start')
            await mes(message)
        else:
            if text == "1":
                db.up_set('game')
                db.update_lvl_admin(1, 7)
                await set_new_user(message)
            elif text == "2":
                db.up_set('name')
                db.update_lvl_admin(2, 7)
                await bot.send_message(message.from_user.id, text="–í–µ–¥–∏—Ç–µ –∏–º—è")
            elif text == "3":
                db.up_set('date')
                db.update_lvl_admin(2, 7)
                db.update_column('settings', 'days')
                my_name = db.sel_admin_us('name', 2)[0]
                await name(message, my_name, True)
            elif text == "4":
                db.up_set('time')
                db.update_lvl_admin(3, 7)
                db.update_column('settings', 'time')
                date = db.sel_admin_us('date', 3)[0]
                await click_date(message, date, True)
            elif text == "5":
                db.up_set('seats')
                db.update_lvl_admin(4, 7)
                db.update_column('settings', 'seats')
                time = db.sel_admin_us('time', 4)[0]
                await ckick_time(message, time, True)
            elif text == "6":
                db.up_set('payment')
                db.update_lvl_admin(6, 7)
                await bot.send_message(message.from_user.id, text="–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=nav.payment)





async def mes(message: types.Message):
    await bot.send_message(message.from_user.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\n\n1.–ò–≥—Ä–∞\n2.–ò–º—è\n3.–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä—ã\n4.–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä—ã\n5.–ö–æ–ª-–≤–æ –º–µ—Å—Ç\n6.–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=nav.chang_the_data)
    db.update_lvl_set(7)







def examination_who_reg(table):
    if db.w_is_inside(table) == False:
        ex = False
    else:
        ex = True
    return ex

def examination_schedule(table, lvl):
    if db.ex_step(table, lvl) == False:
        ex = False
    else:
        ex = True
    return ex

#–£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
async def del_game(query: types.CallbackQuery):
    if query.data == 'yes':
        all_inf_game = db.inf_game()
        data_id = db.sel_data_id(all_inf_game[0][2])[0]
        count_games = db.hm_games(data_id)[0]
        game_id = db.select_game_id(data_id, all_inf_game[0][3])[0]
        if count_games == 1:
            db.del_game(game_id)
            db.del_data(all_inf_game[0][2], "schedule_data")
        else:
            db.del_game(game_id)
        await bot.send_message(query.from_user.id, text="–î–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞")
        db.delete()
    else:
        await bot.send_message(query.from_user.id, text="–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –Ω–∞—á–∞–ª–æ")
        await bot.send_message(query.from_user.id, text="–í–æ—Ç —Ç–≤–µ –º–æ–∏—Ö –≥–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/schedule - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n/filled - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞–ø–∏—Å–∞–ª—Å—è –∏ –∑–∞–æ–¥–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º–∏\n/newuser - –í—ã —Å–∞–º–∏ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
       

async def step(message: types.Message):
    all_lvls = [1, 2, 3, 4, 5, 10]
    i = 0
    table = db.name_table()[0]
    lvl = db.sel_lvl(table)[0]
    while lvl != all_lvls[i]:
        i += 1
    if message.text == '–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥':
        next_lvl = all_lvls[i + 1]
        if lvl == 1:
   #         if table == "prog_who_reg":
    #            await kb_data(message)
    #            db.update_lvl_whor(next_lvl)
     #       else:
                pass
        elif lvl == 3:
        #    if table == "prog_who_reg":
         #       data = db.select_data_whor()[0]
         #       await click_date(message, data, False)
         #       db.update_lvl_whor(next_lvl)
            if table != "prog_who_reg":
                await bot.send_message(message.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: 12:00 13:00 14:00 15:00")
        elif lvl == 4:
            if table != "prog_who_reg":
                await bot.send_message(message.from_user.id, text="–í–µ–¥–∏—Ç–µ–Ω –∫–æ–ª-–≤–æ –º–µ—Å—Ç\n–ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ —Ü–∏—Ñ—Ä–∞—Ö –∏ —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö –∏ –¥—É–∑–Ω–∞—á–Ω—ã—Ö.\n–ï—Å–ª–∏ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–∞ –Ω–∞ –±–æ–ª—å—à–µ —á–µ–º –æ–¥–Ω—É –∏–≥—Ä—É, —Ç–æ –ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        elif lvl == 5:
            if table != "prog_who_reg":
                await bot.send_message(message.from_user.id, text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", reply_markup=nav.whoreg)
                db.end()
                await bot.send_message(message.from_user.id, text="–í–æ—Ç –¥–≤–µ –º–æ–∏—Ö –≥–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/schedule - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n/filled - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞–ø–∏—Å–∞–ª—Å—è –∏ –∑–∞–æ–¥–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º–∏")

    
    elif message.text == '–ù–∞–∑–∞–¥':
        if lvl == 1:
            await bot.send_message(message.from_user.id, text="–≠—Ç–æ –Ω–∞—á–∞–ª–æ", reply_markup=None)
        back_lvl = all_lvls[i-1]
        if lvl == 2:
            if table == "prog_who_reg":
                await startwhoreg(message)
                db.update_lvl_whor(back_lvl)
            else:
                await schedule_comm(message)
                db.update_lvl(back_lvl, "schedule_data", "schedule_games")
        elif lvl == 3:
            if table == "prog_who_reg":
                await kb_data(message)
                db.update_lvl_whor(back_lvl)
            else:
                text = db.select_game(3)[0]
                await call_back_games2(message, text, False)
                db.update_lvl(back_lvl, "schedule_data", "schedule_games")
        elif lvl == 4:
            if table != "prog_who_reg":
                text = db.select_data(4)[0]
                db.delete_new_times()
                await dat(message, text, False)
                db.update_lvl(back_lvl, "schedule_data", "schedule_games")
        elif lvl == 5:
            if table != "prog_who_reg":
                text = ''.join([item[0] for item in db.select_times()])
                await added_times(message, text, False)
                db.update_lvl(back_lvl, "schedule_data", "schedule_games")

#        if db.sel_column(lvl) == True:
#            if now_lvl == 1:
#                await call_back_games2()
#            elif now_lvl == 2:
#            elif now_lvl == 3:
#            elif now_lvl == 4:
#            elif now_lvl == 5:
#    else:
#        pass
#async def what_date(message: types.Message):   
#    global weekDays
#    current_day = datetime.datetime.now().strftime("%A")  
#    logging.warning(current_day)
#    day = "Sunday"
#    i = 0
#    while weekDays[i] != current_day:
#        i += 1
#    j = i
#    while weekDays[j] != day:
#        j += 1
#    count = j - i
#    days = count
#    logging.warning(days)
#    future_date = datetime.datetime.now() + datetime.timedelta(days=days)
#    future_date_str = future_date.strftime("%Y-%m-%d")
#    await bot.send_message(message.from_user.id, text=future_date_str)




#    await bot.send_message(user.id, text="–ù–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∏–≥—Ä–∞ —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ –∏ –∑–∞–ø—è—Ç—ã–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: 12:00,09:00,22:00 \n!–ë–ï–ó –ü–†–û–ë–ï–õ–û–í!\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–µ –∫ –æ–¥–Ω–æ–º—É –¥–Ω—é - 4")


async def main():
    print("zzz")
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    print("wtf")
    asyncio.run(main())