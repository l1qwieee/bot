import logging
import datetime
from aiogram.utils.markdown import hlink
from aiogram import Bot, Dispatcher, Router, types
import asyncio
from dbad import DataBase
import keyboards as nav
import re

TOKEN = "5841486224:AAFf3GSIIZIVYxnsXD31Hvy3nPJWdvzZxwo"

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
db = DataBase("..\\bot(for_all)\database.db")

countKeyboards = [nav.whoreg, nav.mainGames, nav.inkb, nav.inkbtime]

weekDays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
weekDRus = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]


# –ü–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π:
# 1. –ü—Ä–≤–æ–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ –ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç–æ–º
# 2. –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è: 1)—Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ(–¥–æ–ø–æ–ª–Ω–∏—Ç—å) 2) –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è
# 1)
#   1. –í—ã–±–æ—Ä –∏–≥—Ä—ã
#   2. –í–≤–æ–¥ –¥–∞—Ç—ã
#   3. –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
#   4. –í–≤–æ–¥ –∫–æ–ª-–≤–∞ –º–µ—Å—Ç

#–ù–∞—á–∞–ª–æ
@router.message()
async def vector_mes(message: types.Message):
    if message.text == '/start':
        await start_comm(message)
    elif message.text == '–£–∑–Ω–∞—Ç—å –∫—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è' or message.text == '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        await choice_direction(message)
    elif message.text == '/whoreg':
        await startwhoreg(message)
    elif message.text == '/schedule':
        await schedule_comm(message)
    elif re.match(r"\d{1,2}-\d{1,2}-\d{4}", message.text):
        await dat(message)
    elif re.match(r"\d{2}:\d{2}", message.text):
        await added_times(message)
    elif re.match(r"\d{2}|\d{1}", message.text):
        await num_of_seats(message)
    else:
        await bot.send_message(message.from_user.id, text="ZzZzZzZzZzZ")

@router.callback_query()
async def vector_call(query: types.CallbackQuery):
    if query.data == "volleyball" or query.data == "football":
        await call_back_games2(query)
    elif query.data[0] == "*":
        ch = query.data[1:]
        await click_date(query, ch)
    elif query.data[0] == "9":
        ch = query.data[1:]
        await ckick_time(query, ch)
    elif query.data == "yes" or query.data == "no":
        await del_game(query)
    

async def start_comm(message: types.Message):
    if message.from_user.id == 738070596:
        await bot.send_message(message.from_user.id, text="–ü—Ä–∏–≤–µ—Ç! –¢—ã –∫–∞–∫ —Ä–∞–∑ —Ç–æ—Ç, –∫—Ç–æ –º–Ω–µ –Ω—É–¥–∂–µ–Ω) –ü–æ–∫–∞–∂—É —Ç–µ–±–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è —É –º–µ–Ω—è –µ—Å—Ç—å –ø–æ —Ç–≤–æ–µ–º—É –∂–µ–ª–∞–Ω–∏—é", reply_markup=countKeyboards[0])
        await bot.send_message(message.from_user.id, text="–ò—Ç–∞–∫, –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏–ª–∏ —á—Ç–æ —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ !–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –Ω–∞—á–∏–Ω–∞–π—Ç–µ –≤—Å–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, –∞ –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Ç–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ò–ª–∏ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–ø–µ—Ü–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫:\n/schedule - –ª—é–±–∞—è –ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n/whoreg - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏")
    else:
        await bot.send_message(message.from_user.id, text="–ë—Ä–æ, —Ç—ã –∫—Ç–æ? \n –∏–¥–∏-–∫–∞ —Ç—ã –æ—Ç—Å—é–¥–∞")

#–í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async def choice_direction(message: types.Message):
    db.delete()
    db.delete_data()
    if message.text == '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        db.ff_step("schedule_data", "start")
    else:
        db.ff_step("prog_who_reg", "start")
    await bot.send_message(message.from_user.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –∏–≥—Ä—É:", reply_markup=nav.InmainGames)

#–í—ã–±–æ—Ä: —É–∑–Ω–∞–µ–º –∫—Ç–æ –∫—É–¥–∞ –∑–∞–ø–∏—Å–∞–ª—Å—è
async def startwhoreg(message: types.Message):
    db.ff_step("prog_who_reg", "start")
    await bot.send_message(message.from_user.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –∏–≥—Ä—É:", reply_markup=nav.InmainGames)

#–í—ã–±–æ—Ä: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
#–í—ã–∑–æ–≤ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
async def schedule_comm(message: types.Message):
    db.ff_step("schedule_data", "start")
    await bot.send_message(message.from_user.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –∏–≥—Ä—É:", reply_markup=nav.InmainGames)

#–í—ã–±–æ—Ä –∏–≥—Ä—ã/–≤—ã–∑–æ–≤ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
async def call_back_games2(query: types.CallbackQuery):
    if examination_schedule("schedule_data", "start") == False and examination_who_reg("prog_who_reg") == False:
        await bot.send_message(query.from_user.id, text="–ï—Å–ª–∏ –±—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω, —Ç–æ —è –±—ã —Å–µ–π—á–∞—Å –∑–∞–ª–∞–≥–∞–ª, —Ç.–∫. –≤—ã –Ω–∞—Ä—É—à–∏–ª–∏ –º–æ–∏ –ø—Ä–∞–≤–∏–ª–∞.\n–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—ã—à–ª—é –≤–∞–º –∏—Ö –µ—â–µ —Ä–∞–∑:")
        await bot.send_message(query.from_user.id, text="–ò—Ç–∞–∫, –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏–ª–∏ —á—Ç–æ —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ !–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –Ω–∞—á–∏–Ω–∞–π—Ç–µ –≤—Å–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, –∞ –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Ç–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ò–ª–∏ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–ø–µ—Ü–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫:\n/schedule - –ª—é–±–∞—è –ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n/whoreg - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏")

    else:

        if examination_schedule("schedule_data", "start") == True:
            table = "schedule_data"
        elif examination_who_reg("prog_who_reg") == True:
            table = "prog_who_reg"
        game = query.data
        db.f_step(table, game, "game", "start")

        if table == "prog_who_reg":
            await kb_data(query)
        else:
            await bot.send_message(query.from_user.id, text="–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä—ã. \n–ü—Ä–∏–º–µ—Ä: 20-02-2023")



#–í—ã–±–æ—Ä –¥–∞—Ç—ã/–≤—ã–∑–æ–≤ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏/–≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏/–≤—ã–∑–æ–≤ –≤–≤–æ–¥–∞ –∫–æ–ª-–≤–∞ –º–µ—Å—Ç–∞/–≤–≤–æ–¥ –∫–æ–ª-–≤–∞ –º–µ—Å—Ç
async def dat(message: types.Message):

    if examination_schedule("schedule_data", "game") == False:
        await bot.send_message(message.from_user.id, text="–ï—Å–ª–∏ –±—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω, —Ç–æ —è –±—ã —Å–µ–π—á–∞—Å –∑–∞–ª–∞–≥–∞–ª, —Ç.–∫. –≤—ã –Ω–∞—Ä—É—à–∏–ª–∏ –º–æ–∏ –ø—Ä–∞–≤–∏–ª–∞.\n–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—ã—à–ª—é –≤–∞–º –∏—Ö –µ—â–µ —Ä–∞–∑:")
        await bot.send_message(message.from_user.id, text="–ò—Ç–∞–∫, –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏–ª–∏ —á—Ç–æ —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ !–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –Ω–∞—á–∏–Ω–∞–π—Ç–µ –≤—Å–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, –∞ –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Ç–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ò–ª–∏ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–ø–µ—Ü–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫:\n/schedule - –ª—é–±–∞—è –ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n/whoreg - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏")

    else:
        today = datetime.date.today()
        user_date_str = message.text
        user_date = datetime.datetime.strptime(user_date_str, "%d-%m-%Y").date()
        if today > user_date:
            await bot.send_message(message.from_user.id, text="–≠—Ç–∞ –¥–∞—Ç–∞ –º–µ–Ω—å—à–µ, —á–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è. –ó–∞—á–µ–º –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–∞—Ç—É –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ? üßê")
        else:
    # –î–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    # –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –≤–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã

            if db.select("game", "game")[0] == "volleyball":
                sel_game = "volleyball"
            else:
                sel_game = "football"


            if db.chek_data(message.text, sel_game) != []:
                await bot.send_message(message.from_user.id, text="–¢–∞–∫–∞—è –¥–∞—Ç–∞ —É–∂–µ –µ—Å—Ç—å. –í—ã –º–æ–∂–µ—Ç–µ –µ–µ —É–¥–∞–ª–∏—Ç—å")
            else:
                db.add("data", message.text, "data", "game", sel_game)
                await bot.send_message(message.from_user.id, text="–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                await bot.send_message(message.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: 12:00 13:00 14:00 15:00")


# –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
async def added_times(message: types.Message):
    if examination_schedule("schedule_data", "data") == False:
        await bot.send_message(message.from_user.id, text="–ï—Å–ª–∏ –±—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω, —Ç–æ —è –±—ã —Å–µ–π—á–∞—Å –∑–∞–ª–∞–≥–∞–ª, —Ç.–∫. –≤—ã –Ω–∞—Ä—É—à–∏–ª–∏ –º–æ–∏ –ø—Ä–∞–≤–∏–ª–∞.\n–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—ã—à–ª—é –≤–∞–º –∏—Ö –µ—â–µ —Ä–∞–∑:")
        await bot.send_message(message.from_user.id, text="–ò—Ç–∞–∫, –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏–ª–∏ —á—Ç–æ —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ !–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –Ω–∞—á–∏–Ω–∞–π—Ç–µ –≤—Å–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, –∞ –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Ç–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ò–ª–∏ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–ø–µ—Ü–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫:\n/schedule - –ª—é–±–∞—è –ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n/whoreg - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏")

    else:
        ms = ''.join(message.text)
        times = ms.split()
        bool = False
        for i in ms:
            if i == ":":
                bool = True
                break
        if bool == True:
            cc = 0
            data_id = db.select_data_id("data")[0] # —É–∑–Ω–∞—é –∫–∞–∫–∞—è –¥–∞—Ç–∞ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞
            while cc < len(times):
                if bool == True:
                    db.insert_time(data_id, times[cc], "time")
                cc += 1
            db.update_step(data_id, "time")
            await bot.send_message(message.from_user.id, text="–°—É–ø–µ—Ä! –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –Ω–∞ –æ–¥–Ω—É –∏–≥—Ä—É. –ï—Å–ª–∏ –≤—ã –ø—Ä–∏ –≤–≤–æ–¥–µ –≤—Ä–µ–º–µ–Ω–∏ —É–∫–∞–∑–∞–ª–∏ –±–æ–ª—å—à–µ —á–µ–º –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–æ —Ç–æ–≥–¥–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Ç–æ–∂–µ —Å–∞–º–æ–µ –∏ —Ç—É—Ç. –ü—Ä–∏–º–µ—Ä: 11 12 13 (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –¥–≤—É–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ)")



#–í–≤–æ–¥ –º–µ—Å—Ç–∞
async def num_of_seats(message: types.Message):
    if examination_schedule("schedule_data", "time") == False:
        await bot.send_message(message.from_user.id, text="–ï—Å–ª–∏ –±—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω, —Ç–æ —è –±—ã —Å–µ–π—á–∞—Å –∑–∞–ª–∞–≥–∞–ª, —Ç.–∫. –≤—ã –Ω–∞—Ä—É—à–∏–ª–∏ –º–æ–∏ –ø—Ä–∞–≤–∏–ª–∞.\n–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—ã—à–ª—é –≤–∞–º –∏—Ö –µ—â–µ —Ä–∞–∑:")
        await bot.send_message(message.from_user.id, text="–ò—Ç–∞–∫, –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏–ª–∏ —á—Ç–æ —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ !–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –Ω–∞—á–∏–Ω–∞–π—Ç–µ –≤—Å–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, –∞ –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Ç–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ò–ª–∏ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–ø–µ—Ü–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫:\n/schedule - –ª—é–±–∞—è –ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n/whoreg - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏")
    else:
        ms = ''.join(message.text)
        place = ms.split()
        print(place)
        bool = False
        for i in ms:
            if i == ":":
                bool = True
                break
        if bool == True:
            await added_times(message)
        else:
            data_id = db.select_data_id("time")[0]
            res = db.select_id(data_id)
            hmid = [item[0] for item in res]
            cc = 0
            while cc < len(place):
                db.add_place(place[cc], hmid[cc], data_id)
                cc += 1
            await bot.send_message(message.from_user.id, text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            await bot.send_message(message.from_user.id, text="–í–æ—Ç –¥–≤–µ –º–æ–∏—Ö –≥–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/schedule - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n/whoreg - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞–ø–∏—Å–∞–ª—Å—è –∏ –∑–∞–æ–¥–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º–∏")




#–í—ã–±–æ—Ä: —É–∑–Ω–∞–µ–º –∫—Ç–æ –∫—É–¥–∞ –∑–∞–ø–∏—Å–∞–ª—Å—è

#–í—ã–±–æ—Ä –¥–∞—Ç—ã
async def kb_data(message: types.Message):
    if examination_who_reg("prog_who_reg") == False:
        await bot.send_message(message.from_user.id, text="–ï—Å–ª–∏ –±—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω, —Ç–æ —è –±—ã —Å–µ–π—á–∞—Å –∑–∞–ª–∞–≥–∞–ª, —Ç.–∫. –≤—ã –Ω–∞—Ä—É—à–∏–ª–∏ –º–æ–∏ –ø—Ä–∞–≤–∏–ª–∞.\n–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—ã—à–ª—é –≤–∞–º –∏—Ö –µ—â–µ —Ä–∞–∑:")
        await bot.send_message(message.from_user.id, text="–ò—Ç–∞–∫, –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏–ª–∏ —á—Ç–æ —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ !–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –Ω–∞—á–∏–Ω–∞–π—Ç–µ –≤—Å–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, –∞ –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Ç–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ò–ª–∏ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–ø–µ—Ü–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫:\n/schedule - –ª—é–±–∞—è –ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n/whoreg - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏")
    else:
        days = []
        
        row = [date[0] for date in db.sel_all_data()]
        for item in row:
            days.append(item)

        await bot.send_message(message.from_user.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É:", reply_markup=nav.kbdata(days))


#–£–∑–Ω–∞—é –∫–∞–∫–∞—è –¥–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞
async def click_date(query: types.CallbackQuery, text):
    if examination_who_reg("prog_who_reg") == False:
        await bot.send_message(query.from_user.id, text="–ï—Å–ª–∏ –±—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω, —Ç–æ —è –±—ã —Å–µ–π—á–∞—Å –∑–∞–ª–∞–≥–∞–ª, —Ç.–∫. –≤—ã –Ω–∞—Ä—É—à–∏–ª–∏ –º–æ–∏ –ø—Ä–∞–≤–∏–ª–∞.\n–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—ã—à–ª—é –≤–∞–º –∏—Ö –µ—â–µ —Ä–∞–∑:")
        await bot.send_message(query.from_user.id, text="–ò—Ç–∞–∫, –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏–ª–∏ —á—Ç–æ —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ !–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –Ω–∞—á–∏–Ω–∞–π—Ç–µ –≤—Å–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, –∞ –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Ç–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ò–ª–∏ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–ø–µ—Ü–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫:\n/schedule - –ª—é–±–∞—è –ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n/whoreg - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏")
    else:
        choice = text
        db.update("data", choice, "data", "game")
        times = []
        data_id = db.sel_data_id(choice)[0]

        row = [date[0] for date in db.sel_time(data_id)]
        for item in row:
            times.append(item)

        await bot.send_message(query.from_user.id, text="–í—ã–±–µ—Ä–µ—Ç–µ –≤—Ä–µ–º—è:", reply_markup=nav.kbtime(times))


#–£–∑–Ω–∞—é –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ
async def ckick_time(query: types.CallbackQuery, text):
    if examination_who_reg("prog_who_reg") == False:
        await bot.send_message(query.from_user.id, text="–ï—Å–ª–∏ –±—ã –Ω–µ –º–æ–π —Ö–æ–∑—è–∏–Ω, —Ç–æ —è –±—ã —Å–µ–π—á–∞—Å –∑–∞–ª–∞–≥–∞–ª, —Ç.–∫. –≤—ã –Ω–∞—Ä—É—à–∏–ª–∏ –º–æ–∏ –ø—Ä–∞–≤–∏–ª–∞.\n–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—ã—à–ª—é –≤–∞–º –∏—Ö –µ—â–µ —Ä–∞–∑:")
        await bot.send_message(query.from_user.id, text="–ò—Ç–∞–∫, –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª –∫–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n–ï—Å–ª–∏ –≤—ã —Ä–µ—à–∏–ª–∏ —á—Ç–æ —Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ !–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û! –Ω–∞—á–∏–Ω–∞–π—Ç–µ –≤—Å–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, –∞ –µ—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Ç–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ò–ª–∏ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–ø–µ—Ü–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫–∏–µ –∫–∞–∫:\n/schedule - –ª—é–±–∞—è –ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n/whoreg - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏")
    else:
        choice = text
        data = db.select_data("data")[0]
        data_id = db.select_data_id_chek(data)[0]
        game_id = db.select_game_id(data_id, choice)[0]
        reg_list = db.chek_guys(game_id)
        db.update("time", choice, "time", "data")
        if reg_list == []:
            await bot.send_message(query.from_user.id, text="–¢—É—Ç –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç(((")
            await bot.send_message(query.from_user.id, text="–ñ–µ–ª–∞–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∏–≥—Ä—É?", reply_markup=nav.kbyes)
        else:

            nicknames = await link_generetion(game_id)



            inf_list = ["–ò–º—è", "–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º(–Ω–µ–π)", "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"]
            message_text = "–í–æ—Ç –∫—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ —ç—Ç—É –∏–≥—Ä—É: \n"
            i = 0
            j = 0
            while i < len(reg_list):
                while j < 3:
                    text = reg_list[i][j]
                    if j == 0:
                        text = hlink(reg_list[i][j], nicknames[i])
                    message_text += f"<b>-{inf_list[j]}:</b>   <u>{text}</u>\n"
                    j += 1
                i += 1
                j = 0

            await bot.send_message(query.from_user.id, text=message_text, parse_mode="HTML")
            db.delete()



async def link_generetion(game_id):

    all_nicknames = [date[0] for date in db.sel_all_nickname(game_id)]
    message_text = []
    for item in all_nicknames:
        message_text.append(f"t.me/{item}")



    return message_text


def examination_who_reg(table):
    if db.w_is_inside(table) == False:
        ex = False
    else:
        ex = True
    return ex

def examination_schedule(table, step):
    if db.ex_step(table, step) == False:
        ex = False
    else:
        ex = True
    return ex

#–£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
async def del_game(query: types.CallbackQuery):
    if query.data == 'yes':
        all_inf_game = db.inf_game()
        data_id = db.sel_data_id(all_inf_game[0][2])[0]
        count_games = db.hm_games(data_id)[0]
        game_id = db.select_game_id(data_id, all_inf_game[0][3])[0]
        if count_games == 1:
            db.del_game(game_id)
            db.del_data(all_inf_game[0][2], "schedule_data")
        else:
            db.del_game(game_id)
        await bot.send_message(query.from_user.id, text="–î–∞–Ω–Ω–∞—è –∏–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞")
        db.delete()
    else:
        await bot.send_message(query.from_user.id, text="–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –Ω–∞—á–∞–ª–æ")
        await bot.send_message(query.from_user.id, text="–í–æ—Ç –¥–≤–µ –º–æ–∏—Ö –≥–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/schedule - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n/whoreg - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –∫—É–¥–∞ –∑–∞–ø–∏—Å–∞–ª—Å—è –∏ –∑–∞–æ–¥–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º–∏")
        
       


#async def what_date(message: types.Message):   
#    global weekDays
#    current_day = datetime.datetime.now().strftime("%A")  
#    logging.warning(current_day)
#    day = "Sunday"
#    i = 0
#    while weekDays[i] != current_day:
#        i += 1
#    j = i
#    while weekDays[j] != day:
#        j += 1
#    count = j - i
#    days = count
#    logging.warning(days)
#    future_date = datetime.datetime.now() + datetime.timedelta(days=days)
#    future_date_str = future_date.strftime("%Y-%m-%d")
#    await bot.send_message(message.from_user.id, text=future_date_str)




#    await bot.send_message(user.id, text="–ù–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∏–≥—Ä–∞ —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ –∏ –∑–∞–ø—è—Ç—ã–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: 12:00,09:00,22:00 \n!–ë–ï–ó –ü–†–û–ë–ï–õ–û–í!\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–µ –∫ –æ–¥–Ω–æ–º—É –¥–Ω—é - 4")


async def main():
    print("zzz")
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    print("wtf")
    asyncio.run(main())